{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Frontend\\\\DATE\\\\src\\\\pages\\\\ForgotPassword.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport background from \"../assets/background-image.png\"; // replace with your actual image\nimport logo from \"../assets/rightlogo.png\";\nimport illustration from \"../assets/illustration1.png\";\nimport \"../styles/ForgotPassword.css\"; // CSS we'll create below\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = Yup.object().shape({\n  userInput: Yup.string().required(\"Email/Phone/ID is required\").test(\"valid\", \"Enter a valid Email, Phone or ID\", value => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const phoneRegex = /^[0-9]{10}$/;\n    return emailRegex.test(value) || phoneRegex.test(value) || value.length >= 6;\n  })\n});\nconst ForgotPassword = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    alert(\"Reset link has been sent if the ID is found in our records.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ForgotPassword-page\",\n    style: {\n      backgroundImage: `url(${background})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"Logo\",\n      className: \"ForgotPassword-logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ForgotPassword-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter your email address, click \\u201CReset password\\u201D, and we\\u2019ll send you a link to reset your password.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Email/Phone/ID \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"required\",\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ...register(\"userInput\"),\n          placeholder: \"Enter your Email or Phone or ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), errors.userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: errors.userInput.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Reset password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ForgotPassword-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: illustration,\n        alt: \"Illustration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ForgotPassword, \"RcUlyA4GEHKh2CRkv6V7TGIZ2pY=\", false, function () {\n  return [useForm];\n});\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useForm","yupResolver","Yup","background","logo","illustration","jsxDEV","_jsxDEV","schema","object","shape","userInput","string","required","test","value","emailRegex","phoneRegex","length","ForgotPassword","_s","register","handleSubmit","formState","errors","resolver","onSubmit","data","console","log","alert","className","style","backgroundImage","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","message","type","_c","$RefreshReg$"],"sources":["D:/projects/Frontend/DATE/src/pages/ForgotPassword.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport background from \"../assets/background-image.png\"; // replace with your actual image\r\nimport logo from \"../assets/rightlogo.png\";\r\nimport illustration from \"../assets/illustration1.png\";\r\nimport \"../styles/ForgotPassword.css\"; // CSS we'll create below\r\n\r\nconst schema = Yup.object().shape({\r\n  userInput: Yup.string()\r\n    .required(\"Email/Phone/ID is required\")\r\n    .test(\"valid\", \"Enter a valid Email, Phone or ID\", (value) => {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      const phoneRegex = /^[0-9]{10}$/;\r\n      return emailRegex.test(value) || phoneRegex.test(value) || value.length >= 6;\r\n    }),\r\n});\r\n\r\nconst ForgotPassword = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    alert(\"Reset link has been sent if the ID is found in our records.\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"ForgotPassword-page\" style={{ backgroundImage: `url(${background})` }}>\r\n      <img src={logo} alt=\"Logo\" className=\"ForgotPassword-logo\" />\r\n\r\n      <div className=\"ForgotPassword-container\">\r\n        <h2>Forgot Password</h2>\r\n        <p>\r\n          Enter your email address, click “Reset password”, and we’ll send you a link to reset your password.\r\n        </p>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <label>\r\n            Email/Phone/ID <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            {...register(\"userInput\")}\r\n            placeholder=\"Enter your Email or Phone or ID\"\r\n          />\r\n          {errors.userInput && <p className=\"error\">{errors.userInput.message}</p>}\r\n\r\n          <button type=\"submit\">Reset password</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"ForgotPassword-image\">\r\n        <img src={illustration} alt=\"Illustration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}